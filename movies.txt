{FIRST FIT}
#include<stdio.h> 

#define max 25 

void main() 

{ 

int b[max],f[max],i,j,nb,nf,temp; 

static int ff[max]; 

printf("\n\tMemory Management Scheme - First Fit"); 

printf("\nEnter the number of blocks:"); 

scanf("%d",&nb); 

printf("Enter the number of files:"); 

scanf("%d",&nf); 

printf("\nEnter the size of the blocks:-\n"); 

for(i=1;i<=nb;i++) 

{ 

    printf("Block %d:",i); 

    scanf("%d",&b[i]); 

} 

printf("Enter the size of the files :-\n"); 

for(i=1;i<=nf;i++) 

{ 

    printf("File %d:",i); 

    scanf("%d",&f[i]); 

} 

for(i=1;i<=nf;i++) 

{ 

    for(j=1;j<=nb;j++) 

    { 

            temp=b[j]-f[i]; 

            if(temp>=0) 

            { 

                ff[i]=j; 

                break; 

            } 

      } 

    } 

printf("\nFile_no File_size Block_no Block_size:"); 

for(i=1;i<=nf;i++) 

printf("\n%d\t\t\t%d\t\t%d\t\t\t%d",i,f[i],ff[i],b[ff[i]]); 

} 

----------------------------------------------------------------------------------------------------

{BEST FIT}
#include<stdio.h> 

#define max 25 

void main() 

{ 

int b[max],f[max],i,j,nb,nf,temp,lowest=10000; 

static ff[max]; 

printf("\nEnter the number of blocks:"); 

scanf("%d",&nb); 

printf("Enter the number of files:"); 

scanf("%d",&nf); 

printf("\nEnter the size of the blocks:-\n"); 

for(i=1;i<=nb;i++) 

{ 

    printf("Block %d:",i); 

    scanf("%d",&b[i]); 

} 

printf("Enter the size of the files :-\n"); 

for(i=1;i<=nf;i++) 

{ 

    printf("File %d:",i); 

    scanf("%d",&f[i]); 

} 

for(i=1;i<=nf;i++) 

{ 

    for(j=1;j<=nb;j++) 

    { 

        temp=b[j]-f[i]; 

             if(temp>=0) 

            { 

                if(lowest>temp) 

                { 

                ff[i]=j; 

                lowest=temp; 

                } 

            } 

        } 

    lowest=10000; 

} 

printf("\nFile No File Size Block No Block Size"); 

for(i=1;i<=nf && ff[i]!=0;i++) 

printf("\n%d\t\t\t%d\t\t%d\t\t\t%d",i,f[i],ff[i],b[ff[i]]); 

}

----------------------------------------------------------------------------------------------------

{WORST FIT}
#include<stdio.h> 

#define max 25 

void main() 

{ 

int b[max],f[max],i,j,nb,nf,temp,highest=0; 

static ff[max]; 

printf("\nEnter the number of blocks:"); 

scanf("%d",&nb); 

printf("Enter the number of files:"); 

scanf("%d",&nf); 

printf("\nEnter the size of the blocks:-\n"); 

for(i=1;i<=nb;i++) 

{ 

    printf("Block %d:",i); 

    scanf("%d",&b[i]); 

} 

printf("Enter the size of the files :-\n"); 

for(i=1;i<=nf;i++) 

{ 

    printf("File %d:",i); 

    scanf("%d",&f[i]); 

} 

for(i=1;i<=nf;i++) 

{ 

    for(j=1;j<=nb;j++) 

    { 

        temp=b[j]-f[i]; 

             if(temp>=0) 

            { 

                if(temp>highest) 

                { 

                ff[i]=j; 

                highest=temp; 

                } 

            } 

        } 

    highest=0; 

} 

printf("\nFile No File Size Block No Block Size"); 

for(i=1;i<=nf && ff[i]!=0;i++) 

printf("\n%d\t\t\t%d\t\t%d\t\t\t%d",i,f[i],ff[i],b[ff[i]]); 

} 

----------------------------------------------------------------------------------------------------

{Page Replacement Policies}
{OPTIMAL}
#include<stdio.h> 
int main() 
{ 
    int no_of_frames, no_of_pages, frames[10], pages[30], temp[10], flag1, flag2, flag3, i, j, k, pos, max, faults = 0; 
    printf("Enter number of frames: "); 
    scanf("%d", &no_of_frames); 
     
    printf("Enter number of pages: "); 
    scanf("%d", &no_of_pages); 
     
    printf("Enter page reference string: "); 
     
    for(i = 0; i < no_of_pages; ++i){ 
        scanf("%d", &pages[i]); 
    } 
     
    for(i = 0; i < no_of_frames; ++i){ 
        frames[i] = -1; 
    } 
     
    for(i = 0; i < no_of_pages; ++i){ 
        flag1 = flag2 = 0; 
         
        for(j = 0; j < no_of_frames; ++j){ 
            if(frames[j] == pages[i]){ 
                   flag1 = flag2 = 1; 
                   break; 
               } 
        } 
         
        if(flag1 == 0){ 
            for(j = 0; j < no_of_frames; ++j){ 
                if(frames[j] == -1){ 
                    faults++; 
                    frames[j] = pages[i]; 
                    flag2 = 1; 
                    break; 
                } 
            }     
        } 
         
        if(flag2 == 0){ 
         flag3 =0; 
         
            for(j = 0; j < no_of_frames; ++j){ 
             temp[j] = -1; 
             
             for(k = i + 1; k < no_of_pages; ++k){ 
             if(frames[j] == pages[k]){ 
             temp[j] = k; 
             break; 
             } 
             } 
            } 
             
            for(j = 0; j < no_of_frames; ++j){ 
             if(temp[j] == -1){ 
             pos = j; 
             flag3 = 1; 
             break; 
             } 
            } 
             
            if(flag3 ==0){ 
             max = temp[0]; 
             pos = 0; 
             
             for(j = 1; j < no_of_frames; ++j){ 
             if(temp[j] > max){ 
             max = temp[j]; 
             pos = j; 
             } 
             }             
            } 
frames[pos] = pages[i]; 
faults++; 
        } 
         
        printf("\n"); 
         
        for(j = 0; j < no_of_frames; ++j){ 
            printf("%d\t", frames[j]); 
        } 
    } 
     
    printf("\n\nTotal Page Faults = %d", faults); 
     
    return 0; 
} 

----------------------------------------------------------------------------------------------------
{LRU}
#include<stdio.h> 
#include<limits.h> 
 

int checkHit(int incomingPage, int queue[], int occupied){ 
     
    for(int i = 0; i < occupied; i++){ 
        if(incomingPage == queue[i]) 
            return 1; 
    } 
     
    return 0; 
} 

 

void printFrame(int queue[], int occupied) 
{ 
    for(int i = 0; i < occupied; i++) 
        printf("%d\t\t\t",queue[i]); 
} 

 

int main() 
{ 

//    int incomingStream[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1}; 
//    int incomingStream[] = {1, 2, 3, 2, 1, 5, 2, 1, 6, 2, 5, 6, 3, 1, 3, 6, 1, 2, 4, 3}; 
    int incomingStream[] = {2, 3, 2, 1, 5, 2, 4, 5, 3, 2, 5, 2}; 
     
    int n = sizeof(incomingStream)/sizeof(incomingStream[0]); 
    int frames = 3; 
    int queue[n]; 
    int distance[n]; 
    int occupied = 0; 
    int pagefault = 0; 
     
    printf("Page\t Frame1 \t Frame2 \t Frame3\n"); 
     
    for(int i = 0;i < n; i++) 
    { 
        printf("%d:  \t\t",incomingStream[i]); 
        // what if currently in frame 7 
        // next item that appears also 7 
        // didnt write condition for HIT 
         
        if(checkHit(incomingStream[i], queue, occupied)){ 
            printFrame(queue, occupied); 
        } 
         
        // filling when frame(s) is/are empty 
        else if(occupied < frames){ 
            queue[occupied] = incomingStream[i]; 
            pagefault++; 
            occupied++; 
             
            printFrame(queue, occupied); 
        } 
        else{ 
             
            int max = INT_MIN; 
            int index; 
            // get LRU distance for each item in frame 
            for (int j = 0; j < frames; j++) 
            { 
                distance[j] = 0; 
                // traverse in reverse direction to find 
                // at what distance  frame item occurred last 
                for(int k = i - 1; k >= 0; k--) 
                { 
                    ++distance[j]; 

                   if(queue[j] == incomingStream[k]) 
                        break; 
                } 
                 
                // find frame item with max distance for LRU 
                // also notes the index of frame item in queue 
                // which appears furthest(max distance) 
                if(distance[j] > max){ 
                    max = distance[j]; 
                    index = j; 
                } 
            } 
            queue[index] = incomingStream[i]; 
            printFrame(queue, occupied); 
            pagefault++; 
        } 
         
        printf("\n"); 
    } 
     
    printf("Page Fault: %d",pagefault); 
     
    return 0; 
} 

----------------------------------------------------------------------------------------------------
{FI-FO}
#include <stdio.h> 
int main() 
{ 
int referenceString[10], pageFaults = 0, m, n, s, pages, frames; 
printf("\nEnter the number of Pages:\t"); 
scanf("%d", &pages); 
printf("\nEnter reference string values:\n"); 
for( m = 0; m < pages; m++) 
{ 
   printf("Value No. [%d]:\t", m + 1); 
   scanf("%d", &referenceString[m]); 
} 
printf("\n What are the total number of frames:\t"); 
{ 
   scanf("%d", &frames); 
} 
int temp[frames]; 
for(m = 0; m < frames; m++) 
{ 
  temp[m] = -1; 
} 
for(m = 0; m < pages; m++) 
{ 
  s = 0; 
  for(n = 0; n < frames; n++) 
   { 
      if(referenceString[m] == temp[n]) 
         { 
            s++; 
            pageFaults--; 
         } 
   }      
   pageFaults++; 
   if((pageFaults <= frames) && (s == 0)) 
      { 
        temp[m] = referenceString[m]; 
      }    
   else if(s == 0) 
      { 
        temp[(pageFaults - 1) % frames] = referenceString[m]; 
      } 
      printf("\n"); 
      for(n = 0; n < frames; n++) 
       {      
         printf("%d\t", temp[n]); 
       } 
} 
printf("\nTotal Page Faults:\t%d\n", pageFaults); 
return 0; 
} 

----------------------------------------------------------------------------------------------------

{PRODUCER-CONSUMER}
#include <stdio.h> 
#include <stdlib.h> 

int mutex = 1; 
int full = 0; 
int empty = 10, x = 0; 

void producer(){ 
    --mutex; 
    ++full; 
    --empty; 
    x++; 
    printf("\nProducer produces item %d", x); 
    ++mutex;
}
void consumer() {
    --mutex; 
    --full; 
    ++empty; 
    printf("\nConsumer consumes item %d", x);
    x--; 
    ++mutex;
} 
// Driver Code 

int main(){
    int n, i; 
    printf("\n1. Press 1 for Producer");
    printf("\n2. Press 2 for Consumer");
    printf("\n3. Press 3 for Exit");  
    for (i = 1; i > 0; i++) { 
        printf("\nEnter your choice:"); 
        scanf("%d", &n); 

        switch (n) {
            case 1:
                if ((mutex == 1)&& (empty != 0)) {
                    producer();
                }
                else {
                    printf("Buffer is full!"); 
                }
                break;
            case 2: 
                if ((mutex == 1)&& (full != 0)) { 
                    consumer();
                }else {
                    printf("Buffer is empty!");
                }
                break;
            case 3: 
                exit(0); 
            break; 
        } 
    } 
}

----------------------------------------------------------------------------------------------------
{DISK SCHEDULING}
{FCFS}
#include<stdio.h> 

#include<stdlib.h> 

int main() 

{ 

  int ReadyQueue[100],i,n,TotalHeadMov=0,initial;  

  printf("Enter the number of requests: "); 

  scanf("%d",&n); 

  for(i=0;i<n;i++){ 

    printf("Enter the sequence of request: "); 

  scanf("%d",&ReadyQueue[i]); 

  } 

  printf("Enter initial head position: "); 

  scanf("%d",&initial); 

  for(i=0;i<n;i++) 

  { 

    TotalHeadMov=TotalHeadMov+abs(ReadyQueue[i]-initial); 

    initial=ReadyQueue[i]; 

  } 

  printf("Total Head Movement=%d",TotalHeadMov); 

} 

----------------------------------------------------------------------------------------------------
{SSTF}
# include<stdio.h> 

#include<stdlib.h> 

int main() 

{ 

    int ReadyQueue[100],i,n,TotalHeadMoment=0,initial,count=0; 

    printf("Enter The number of requests: "); 

    scanf("%d",&n); 

    for(i=0;i<n;i++){ 

     printf("Enter the requests sequence: "); 

     scanf("%d",&ReadyQueue[i]); 

    } 

     

    printf("Enter the initial head position: "); 

    scanf("%d",&initial); 

     

    while(count!=n) 

    { 

        int min=1000,diff,index; 

        for(i=0;i<n;i++) 

        { 

           diff=abs(ReadyQueue[i]-initial); 

           if(min>diff) 

           { 

               min=diff; 

               index=i; 

           } 

            

        } 

        TotalHeadMoment=TotalHeadMoment+min; 

        initial=ReadyQueue[index]; 

        ReadyQueue[index]=1000; 

        count++; 

    } 

    printf("Total head movement is %d",TotalHeadMoment); 

} 

----------------------------------------------------------------------------------------------------
{SCAN}
#include<stdio.h>
int absoluteValue(int); // Declaring function absoluteValue

void main()
{
    int queue[25],n,headposition,i,j,k,seek=0, maxrange,
    difference,temp,queue1[20],queue2[20],temp1=0,temp2=0;
    float averageSeekTime;

    // Reading the maximum Range of the Disk. 
    printf("Enter the maximum range of Disk: ");
    scanf("%d",&maxrange);
    
    // Reading the number of Queue Requests(Disk access requests)
    printf("Enter the number of queue requests: ");
    scanf("%d",&n);
    
    // Reading the initial head position.(ie. the starting point of execution)
    printf("Enter the initial head position: ");
    scanf("%d",&headposition);
    
    // Reading disk positions to be read in the order of arrival
    printf("Enter the disk positions to be read(queue): ");
    for(i=1;i<=n;i++)   // Note that i varies from 1 to n instead of 0 to n-1
    {
        scanf("%d",&temp);  //Reading position value to a temporary variable
        
        //Now if the requested position is greater than current headposition,
        //then pushing that to array queue1
        if(temp>headposition)
        {
            queue1[temp1]=temp; //temp1 is the index variable of queue1[]
            temp1++; //incrementing temp1
        }
        else    //else if temp < current headposition,then push to array queue2[]
        {   
            queue2[temp2]=temp; //temp2 is the index variable of queue2[]
            temp2++;
        }
    }
    
    //Now we have to sort the two arrays
    //SORTING array queue1[] in ascending order
    for(i=0;i<temp1-1;i++)
    {
        for(j=i+1;j<temp1;j++)
        {
            if(queue1[i]>queue1[j])
            {
                temp=queue1[i];
                queue1[i]=queue1[j];
                queue1[j]=temp;
            }
        }
    }
    
    //SORTING array queue2[] in descending order
    for(i=0;i<temp2-1;i++)
    {
        for(j=i+1;j<temp2;j++)
        {
            if(queue2[i]<queue2[j])
            {
                temp=queue2[i];
                queue2[i]=queue2[j];
                queue2[j]=temp;
            }
        }
    }    
    
    //Copying first array queue1[] into queue[]
    for(i=1,j=0;j<temp1;i++,j++)
    {
        queue[i]=queue1[j]; 
    }
    
    //Setting queue[i] to maxrange because the head goes to
    //end of disk and comes back in scan Algorithm
    queue[i]=maxrange;
    
    //Copying second array queue2[] after that first one is copied, into queue[]
    for(i=temp1+2,j=0;j<temp2;i++,j++)
    {
        queue[i]=queue2[j];
    }
    
    //Setting queue[i] to 0. Because that is the innermost cylinder.
    queue[i]=0;

    //At this point, we have the queue[] with the requests in the 
    //correct order of execution as per scan algorithm.
    //Now we have to set 0th index of queue[] to be the initial headposition. 
    queue[0]=headposition;
    
    // Calculating SEEK TIME. seek is initially set to 0 in the declaration part.
    
    for(j=0; j<=n; j++) //Loop starts from headposition. (ie. 0th index of queue) 
    {   
        // Finding the difference between next position and current position.
        difference = absoluteValue(queue[j+1]-queue[j]);
        
        // Adding difference to the current seek time value
        seek = seek + difference;
        
        // Displaying a message to show the movement of disk head
        printf("Disk head moves from position %d to %d with Seek %d \n",
        queue[j], queue[j+1], difference);
    }
    
    // Calculating Average Seek time 
    averageSeekTime = seek/(float)n;
    
    //Display Total and Average Seek Time(s)
    printf("Total Seek Time= %d\n", seek);
    printf("Average Seek Time= %f\n", averageSeekTime);
}

// Defining function absoluteValue
int absoluteValue(int x)
{
    if(x>0)
    {
        return x;
    }
    else
    {
        return x*-1;
    }
}

----------------------------------------------------------------------------------------------------
{C - SCAN}
#include<stdio.h> 

int absoluteValue(int); // Declaring function absoluteValue 

  

void main() 

{ 

    int queue[25],n,headposition,i,j,k,seek=0, maxrange, 

    difference,temp,queue1[20],queue2[20],temp1=0,temp2=0; 

    float averageSeekTime; 

    // Reading the maximum Range of the Disk.  

    printf("Enter the maximum range of Disk: "); 

    scanf("%d",&maxrange); 

     

    // Reading the number of Queue Requests(Disk access requests) 

    printf("Enter the number of queue requests: "); 

    scanf("%d",&n); 

     

    // Reading the initial head position.(ie. the starting point of execution) 

    printf("Enter the initial head position: "); 

    scanf("%d",&headposition); 

     

    // Reading disk positions to be read in the order of arrival 

    printf("Enter the disk positions to be read(queue): "); 

    for(i=1;i<=n;i++)   // Note that i varies from 1 to n instead of 0 to n-1 

    { 

        scanf("%d",&temp);  //Reading position value to a temporary variable 

         

        //Now if the requested position is greater than current headposition, 

        //then pushing that to array queue1 

        if(temp>headposition) 

        { 

            queue1[temp1]=temp; //temp1 is the index variable of queue1[] 

            temp1++; //incrementing temp1 

        } 

        else    //else if temp < current headposition,then push to array queue2[] 

        {    

            queue2[temp2]=temp; //temp2 is the index variable of queue2[] 

            temp2++; 

        } 

    } 

    //Now we have to sort the two arrays 

    //SORTING array queue1[] in ascending order 

    for(i=0;i<temp1-1;i++) 

    { 

        for(j=i+1;j<temp1;j++) 

        { 

            if(queue1[i]>queue1[j]) 

            { 

                temp=queue1[i]; 

                queue1[i]=queue1[j]; 

                queue1[j]=temp; 

            } 

        } 

    } 

     

    //SORTING array queue2[] in ascending order 

    for(i=0;i<temp2-1;i++) 

    { 

        for(j=i+1;j<temp2;j++) 

        { 

            if(queue2[i]>queue2[j]) 

            { 

                temp=queue2[i]; 

                queue2[i]=queue2[j]; 

                queue2[j]=temp; 

            } 

        } 

    } 

     //Copying first array queue1[] into queue[] 

    for(i=1,j=0;j<temp1;i++,j++) 

    { 

        queue[i]=queue1[j];  

    } 

     

    //Setting queue[i] to maxrange because the head goes to 

    //end of disk and comes back in scan Algorithm 

    queue[i]=maxrange; 

     

    //Moving Disk head to the inner most cylinder, because this is Circular Scan. 

    queue[i+1]=0;  

     

    //Copying second array queue2[] after that first one is copied, into queue[] 

    for(i=temp1+3,j=0;j<temp2;i++,j++) 

    { 

        queue[i]=queue2[j]; 

    } 

     

    //At this point, we have the queue[] with the requests in the  

    //correct order of execution as per C-SCAN algorithm. 

    //Now we have to set 0th index of queue[] to be the initial headposition.  

    queue[0]=headposition; 

     

    // Calculating SEEK TIME. seek is initially set to 0 in the declaration part. 

    for(j=0; j<=n+1; j++) //Loop starts from headposition. (ie. 0th index of queue)  

    {    

        // Finding the difference between next position and current position. 

        difference = absoluteValue(queue[j+1]-queue[j]); 

         

        // Adding difference to the current seek time value 

        seek = seek + difference; 

         

        // Displaying a message to show the movement of disk head 

        printf("Disk head moves from position %d to %d with Seek %d \n", 

queue[j], queue[j+1], difference); 

    } 

     

    // Calculating Average Seek time  

    averageSeekTime = seek/(float)n; 

     

    //Display Total and Average Seek Time(s) 

    printf("Total Seek Time= %d\n", seek); 

    printf("Average Seek Time= %f\n", averageSeekTime); 

} 

  

// Defining function absoluteValue 

int absoluteValue(int x) 

{ 

    if(x>0) 

    { 

        return x; 

    } 

    else 

    { 

        return x*-1; 

    } 

} 

----------------------------------------------------------------------------------------------------
{LOOK}
#include <stdio.h> 

#include <stdlib.h> 

int main(){ 

    int RQ[100], i, j, n, TotalHeadMoment = 0, initial, size, move; 

    printf("Enter the number of Requests: "); 

    scanf("%d", &n); 

    printf("Enter the Requests sequence: "); 

    for (i = 0; i < n; i++) 

        scanf("%d", &RQ[i]); 

    printf("Enter initial head position: "); 

    scanf("%d", &initial); 

    printf("Enter total disk size: "); 

    scanf("%d", &size); 

    printf("Enter the head movement direction for high 1 and for low 0: "); 

    scanf("%d", &move); 

    for (i = 0; i < n; i++){ 

        for (j = 0; j < n - i - 1; j++){ 

            if (RQ[j] > RQ[j + 1]){ 

                int temp; 

                temp = RQ[j]; 

                RQ[j] = RQ[j + 1]; 

                RQ[j + 1] = temp; 

            } 

        } 

    } 

    int index; 

    for (i = 0; i < n; i++){ 

        if (initial < RQ[i]){ 

            index = i; 

            break; 

        } 

    } 

    if (move == 1){ 

        for (i = index; i < n; i++){ 

            TotalHeadMoment = TotalHeadMoment + abs(RQ[i] - initial); 

            initial = RQ[i]; 

        } 

        for (i = index - 1; i >= 0; i--){ 

            TotalHeadMoment = TotalHeadMoment + abs(RQ[i] - initial); 

            initial = RQ[i]; 

        } 

    } 

    else{ 

        for (i = index - 1; i >= 0; i--){ 

            TotalHeadMoment = TotalHeadMoment + abs(RQ[i] - initial); 

            initial = RQ[i]; 

        } 

        for (i = index; i < n; i++){ 

            TotalHeadMoment = TotalHeadMoment + abs(RQ[i] - initial); 

            initial = RQ[i]; 

        } 

    } 

    printf("Total head movement is %d \n", TotalHeadMoment); 

    return 0; 

} 

----------------------------------------------------------------------------------------------------
{BANKER's ALGORITHM}
#include <stdio.h>
int main()
{
    // P0, P1, P2, P3, P4 are the Process names here

    int n, m, i, j, k;
    n = 5;                         // Number of processes
    m = 3;                         // Number of resources
    int alloc[5][3] = {{0, 1, 0},  // P0 // Allocation Matrix
                       {2, 0, 0},  // P1
                       {3, 0, 2},  // P2
                       {2, 1, 1},  // P3
                       {0, 0, 2}}; // P4

    int max[5][3] = {{7, 5, 3},  // P0 // MAX Matrix
                     {3, 2, 2},  // P1
                     {9, 0, 2},  // P2
                     {2, 2, 2},  // P3
                     {4, 3, 3}}; // P4

    int avail[3] = {3, 3, 2}; // Available Resources

    int f[n], ans[n], ind = 0;
    for (k = 0; k < n; k++) //for process excuted or not
    {
        f[k] = 0;
    }
    int need[n][m];
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];
    }
    int y = 0;
    for (k = 0; k < 5; k++)
    {
        for (i = 0; i < n; i++)
        {
            if (f[i] == 0)
            {

                int flag = 0;
                for (j = 0; j < m; j++)
                {
                    if (need[i][j] > avail[j])
                    {
                        flag = 1;
                        break;
                    }
                }

                if (flag == 0)
                {
                    ans[ind++] = i;
                    for (y = 0; y < m; y++)
                        avail[y] += alloc[i][y];
                    f[i] = 1;
                }
            }
        }
    }

    int flag = 1;

    for (int i = 0; i < n; i++)
    {
        if (f[i] == 0)
        {
            flag = 0;
            printf("The following system is not safe");
            break;
        }
    }

    if (flag == 1)
    {
        printf("Following is the SAFE Sequence\n");
        for (i = 0; i < n - 1; i++)
            printf(" P%d ->", ans[i]);
        printf(" P%d", ans[n - 1]);
    }

    return (0);
}